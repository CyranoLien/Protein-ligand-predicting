*** 坐标统一 ***
在多个选择中，选择了质心：To reserve more nodes。
对于大而分散蛋白质，我们不可能保留所有点的信息，一定会有loss。我们想用一个固定体积的立方体，去捕获尽可能多的点。
如果选择最远端(xyz三个方向上都最小的一个虚拟点)作为锚点，对于一些形状诡异的蛋白质，我们不能覆盖大多数点；
因此选择质心(xyz三个方向上的平均值)作为锚点，可以覆盖更多的点。

方法一 3D CNN:
（此处，网络分别卷积蛋白质输入、配体输入，二者仅在最后发生merge，前面没有坐标计算）
1. 对于每个蛋白质、配体，计算【自己的】质心
2. 重新计算蛋白质、配体的坐标，依据自己的质心
3. 选择合适的represent size，生成缩放的三维数组。（比如用40*40*40的立方体，去覆盖空间里的160*160*160）-
4. 确定蛋白质、配体的new size后，计算卷积参数和所需层数，在merge层以相同的shape融合。
5. 增加flatten层，增加dense层，最终输出dense(1)


方法二&三 MLP\LSTM
（此处，对于配体元素，我们试图在蛋白质里找距其最近的点）
1. 对于每个蛋白质-配体对，计算【蛋白质的】质心。
（而不是合起来的质心。在测试集里，如果参考蛋白质的质心，我们仅需计算824次；如果参考整体的质心，我们需要计算824*824次）
2. 重新计算每一对蛋白质、配体的坐标，依据蛋白质的质心
3. 对于坐标修改后的每一个蛋白质，生成一个KDTree
4. 对于每一个配体，对于其中的每一个元素、寻找KDTree里最近的点、生成小基团
5. 将每一个配体对应的 list of小基团，padding后（配体元素个数不一样、需要padding），输入进MLP\LSTM中，输出结果

*** 模型测试 ***
测试完毕后，每个方法一个文件，文件里是对于每一个蛋白质，824个配体的分数。
根据正确率作为权重，三个方法重新计算分数，加起来，合起来找前10。作为结果上交。
正确率应该是precision tp/(tp+fp) (预测为正的有多少是对的)

报告里同时论述八叉树CNN，作为高级模型。
